---
import { getCollection } from 'astro:content'
import Layout from '../../layouts/Layout.astro'
import { chains } from '../../content/chains'
import type { Elem } from '../../content/config'
import { isoDate } from '../../utils'

const chainId = Number(Astro.params.chain) as keyof typeof chains
const treeId = Astro.params.tree

const [{ data: tree }] = await getCollection(
  'trees',
  (tree) => tree.id.startsWith(
    `chain:${chainId}/tree.${treeId.padStart(3, '0')}`
  )
)

export const getStaticPaths = async () => (
  (await Promise.all(
    (await getCollection('trees')).map((tree) => {
      const [, chainId, treeId] = (
        tree.id.match(/chain:(\d+)\/tree\.(\d+)/) ?? []
      )
      const params = (
        { params: { chain: chainId, tree: treeId.replace(/^0+/g, '') } }
      )
      return params
    })
  )).flat()
)
---
<Layout title={`${chains[chainId]} Hats Explorer: ${treeId}`}`>
  <h1>
    <a href="../">‚Üê</a>
    Tree {treeId} on {chains[chainId]} as of {isoDate()}:
    {tree.node.name}
  </h1>
  {(() => {
    const print = (root: Elem) => (
      <li>
        <h2>{root.node.name}</h2>
        {root.node.image && <img src={root.node.image} alt={root.node.name}/>}
        {root.children && (
          <ul>{root.children.map(print)}</ul>
        )}
      </li>
    )
    return <ul>{print(tree)}</ul>
  })()}
</Layout>

<style>
  img {
    max-height: 5rem;
  }
</style>